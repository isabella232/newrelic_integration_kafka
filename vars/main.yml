---

sansible_newrelic_integration_kafka_instances_default:
  kafka-metrics:
    name: kafka-metrics
    command: metrics
    arguments:
      zookeeper_hosts: "{{ sansible_newrelic_integration_kafka_zookeeper_hosts | to_json }}"
      zookeeper_auth_scheme: "{{ sansible_newrelic_integration_kafka_zookeeper_auth_scheme }}"
      zookeeper_auth_secret: "{{ sansible_newrelic_integration_kafka_zookeeper_auth_secret }}"
      zookeeper_path: "{{ sansible_newrelic_integration_kafka_zookeeper_path }}"

      # It is common to use the same JMX configuration across a Kafka cluster
      # The default username and password are the credentials that will be used to make
      # a JMX connection to each broker found by Zookeeper. Theses values will also
      # be used when connecting to a consumer and/or producer if the "username" or "password"
      # field are omitted.
      default_jmx_user:
      default_jmx_password:

      # In order to collect Java producer and consumer metrics the "producers" and "consumers" fields should be filled out.
      # Both fields are JSON arrays with each entry being a separate JAVA producer or consumer, in it's respective field.
      # Each entry should have the following fields:
      # - name: This is the actual name of the producer/consumer as it appears in Kafka
      # - host: The IP or Hostname of the producer/consumser. If omitted, will use the value of the "default_jmx_host" field
      # - port: The port in which JMX is setup for on the producer/consumer. If omitted will, use the value of the "default_jmx_port" field
      # - username: The username used to connect to JMX. If omitted, will use the value of the "default_jmx_user" field
      # - password: The password used to connect to JMX. If omitted, will use the value of the "default_jmx_password" field
      # Example: {"name": "myProducer", "host": "localhost", "port": 24, "username": "me', "password": "secret"}
      producers:
      consumers:

      # If several producers/consumers are on the same host an agent can be installed on that host and the
      # "default_jmx_host" and "default_jmx_port" field can be set once and used for all producers/consumers that
      # do not have the "host" or "port" field repsectively.
      # These fields can be removed if each producer/consumer has it's own "host" and/or "port" field filled out.
      default_jmx_host:
      default_jmx_port:

      # This field is used to toggle the collection of broker and topic metrics. This is on by default and should only be set to "false"
      # for the specific case where only producers/consumers are being monitored and "topic_mode" is set to "All".
      # Any other case this field can be omitted.
      collect_broker_topic_data: "true"

      # Below are the fields used to fine tune/toggle topic metric collection.
      # In order to collect topics the "topic_mode" field must be set to "all" or "list". If the field is set to "all"
      # a Zookeeper connection is required, at least the "zookeeper_hosts" field is required, as topics are looked up via Zookeeper.
      #
      # It is recommended to use the "List" option to monitor a specific set of topics. If using "List" mode the "topic_list"
      # field should be filled out. The "topic_list" is a JSON array of topic names to be monitored.
      # Example of topic_list: '["topic1", "topic2"]'
      #
      # If monitoring topics via the "all" or "list" option for "topic_mode", the topic size can be collected from zookeeper by setting
      # "collect_topic_size" to true. This operation is intensive and can take a while to collect for a larger number of topics.
      # It is recommended to only enable this feature if using a small "topic_list".
      # If the field is omitted it will default to false.
      topic_mode: all
      topic_list: "[]"
      collect_topic_size:
    labels: "{{ sansible_newrelic_integration_kafka_labels }}"

  kafka-inventory:
    name: kafka-inventory
    command: inventory
    arguments:
      # More information about the zookeeper connection can be found above
      zookeeper_hosts: "{{ sansible_newrelic_integration_kafka_zookeeper_hosts | to_json }}"
      zookeeper_auth_scheme: "{{ sansible_newrelic_integration_kafka_zookeeper_auth_scheme }}"
      zookeeper_auth_secret: "{{ sansible_newrelic_integration_kafka_zookeeper_auth_secret }}"
      zookeeper_path: "{{ sansible_newrelic_integration_kafka_zookeeper_path }}"

      # Below are the fields used to fine tune/toggle topic inventory collection.
      # In order to collect topics the "topic_mode" field must be set to "All" or "List". If the field is set to "All"
      # a Zookeeper connection is required, at least the "zookeeper_hosts" field is required, as topics are looked up via Zookeeper.
      #
      # It is recommended to use the "List" option to monitor a specific set of topics. If using "List" mode the "topic_list"
      # field should be filled out. The "topic_list" is a JSON array of topic names to be monitored.
      topic_mode: all
      topic_list: "[]"
    labels: "{{ sansible_newrelic_integration_kafka_labels }}"

  kafka-consumer-offsets:
    name: kafka-consumer-offsets
    command: consumer_offset
    arguments:
      # More information about the zookeeper connection can be found above
      zookeeper_hosts: "{{ sansible_newrelic_integration_kafka_zookeeper_hosts | to_json }}"
      zookeeper_auth_scheme: "{{ sansible_newrelic_integration_kafka_zookeeper_auth_scheme }}"
      zookeeper_auth_secret: "{{ sansible_newrelic_integration_kafka_zookeeper_auth_secret }}"
      zookeeper_path: "{{ sansible_newrelic_integration_kafka_zookeeper_path }}"

      # Whitelist of consumer groups to collect offset data for. This feature is only avaiable in Kafka 0.8.2.2 and above.
      # The value should be a JSON object with the follow structure:
      # Consumer Group Name mapped to a map of topic names.
      # Those topics then map to a JSON array of partition numbers
      #
      # Say we wanted to monitor two consumer groups "consumer_group_1" and "consumer_group_2".
      # "consumer_group_1" we want to monitor "topic_1" with partitions 1, 2, and 3. We also want to monitor
      # "topic_2" within that same group, but want to monitor all partitions within that topic, so we'll give it a blank
      # set of partitions. Below is an example of the value for "consumer_group" field to achieve our desired configuration.
      # {"consumer_group_1": {"topic_1": [1,2,3], "topic_2":[]}}
      consumer_groups: "{}"
    labels: "{{ sansible_newrelic_integration_kafka_labels }}"
